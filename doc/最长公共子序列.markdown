# 最长公共子序列--
    给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。
    一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。
    例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。

## 题目重述
    需要进行两个维度的数据分析，一般会进行双维度的数组设计--往往需要进行双维度的动态规划进行

### 解题思路
    找到重复出现部分，并保留顺序，设计双重数组用以保留，以判定匹配程度

#### 代码实现

'''java
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        
                // 创建一个二维数组dp，dp[i][j]表示text1[0..i-1]和text2[0..j-1]的最长公共子序列长度
                int[][] dp = new int[m + 1][n + 1];
        
                // 动态规划填充数组
                for (int i = 1; i <= m; i++) {
                    for (int j = 1; j <= n; j++) {
                        // 如果当前字符匹配
                        if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                            dp[i][j] = dp[i - 1][j - 1] + 1;
                        } else {
                            // 如果不匹配，取左边或上边的较大值
                            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                        }
                    }
                }
        
                return dp[m][n];
        }

'''

##### 复杂度分析
    m 和 n 分别是字符串 text1 和 text2 的长度
    时间复杂度：O(mn)。
    空间复杂度：O(mn)